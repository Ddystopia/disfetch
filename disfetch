#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2020 veleth
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


###########################################
# global stuff needed everywhere          #
###########################################
INFO=()     # info array
r="\x1B[0m" # reset color
l="\x1B[1m" # bold text

###########################################
# getting needed information              #
###########################################
# TODO:
# + wayland support?
# getting OS name
if [ -f /etc/os-release ];
then
  OS=$(cat /etc/os-release | grep "PRETTY_NAME" | tr '"' " " | awk '{ $1=""; print tolower($0) }' | xargs)
elif type lsb_release &>/dev/null;
then
  OS=$(lsb_release -si | awk '{print tolower($0)}')
else
  OS=$(uname -o | awk '{ print tolower($0) }')
fi
# getting kernel version
KERNEL=$(uname -r)
# getting kernel architecture
ARCH=$(uname -m | awk '{print tolower($0)}')
# finding out if OS has uptime with prerrifying option
# or hardcoding prettified uptime
uptime -p >/dev/null 2>&1
[ $? -eq 0 ] && UPTIME=$(uptime -p | awk '{ $1=""; print }' | tr -d "," | xargs) \
             || UPTIME=$(
  awk '{
    uptime = $1;
    if (uptime >= 604800) {
      if (uptime >= 1209600) {
        printf "%s weeks ", int(uptime/604800);
      } else {
        printf "1 week ";
      }
    }
    if (uptime >= 86400) {
      if (int((uptime%604800)/86400) > 0) {
        if (int((uptime%604800)/86400) >= 2) {
          printf "%s days ", int((uptime%604800)/86400);
        } else {
          printf "1 day ";
        }
      }
    }
    if (uptime >= 3600) {
      if (int((uptime%86400)/3600) > 0) {
        if (int((uptime%86400)/3600) >= 2) {
          printf "%s hours ", int((uptime%86400)/3600);
        } else {
          printf "1 hour ";
        }
      }
    }
    if (uptime >= 60) {
      if (int((uptime%3600)/60) > 0) {
        if (int((uptime%3600)/60) >= 2) {
          printf "%s minutes ", int((uptime%3600)/60);
        } else {
          printf "1 minute ";
        }
      }
    }
    if (uptime >= 1 && 59 >= uptime) {
      if (int(uptime%60) > 0) {
        if (int(uptime%60) >= 2) {
          printf "%s seconds", int(uptime%60);
        } else {
          printf "1 second";
        }
      }
    }
  }' /proc/uptime | xargs) \
             || UPTIME=$(uptime | cut -f1 -d "," | sed -E 's/^[^,]*up *//; s/, *[[:digit:]]* users.*//; s/min/minutes/; s/([[:digit:]]+):0?([[:digit:]]+)/\1 hours \2 minutes/' | xargs)
# getting current shell name
SHELL=$(echo $SHELL | tr "/" " " | awk '{ print $NF }')
# getting DE and WM
# firstly getting root window id (WM)
wm_id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2>/dev/null)
# getting WM name, ignoring unimportant stuff
wm=$(xprop -id ${wm_id##* } -notype -f _NET_WM_NAME 8t 2>/dev/null | xargs | awk '{ print $3 }')
# trying XDG_CURRENT_DESKTOP, if it doesn't exists, use DESKTOP_SESSION
# DESKTOP_SESSION is a full path so removing garbage
de=$(echo ${XDG_CURRENT_DESKTOP:-$DESKTOP_SESSION} | tr "/" " " | awk '{ print $NF }')
if [[ ! -z $de ]] && grep "none" <<< $de >/dev/null 2>&1 || [[ -z $de ]];
then
  DESKTOP=$wm
else
  DESKTOP="$de $wm"
fi

###########################################
# defining distro logo and packages count #
###########################################
# note for nixos: display only current user installed
# packages with no dependencies
case $OS in
android*)
  motif="\x1B[92m$l"
  g="\x1B[32m$l"
  LOGO[0]="     $g\..../$r    "
  LOGO[1]="     ${g}d${r}o${g}HH${r}o${g}b$r    "
  LOGO[2]="    $g'''''''$r   "
  LOGO[3]="  $g.$r ${g}GHHHHHHB$r $g.$r"
  LOGO[4]="  ${g}H$r ${g}H######H$r ${g}H$r"
  LOGO[5]="  ${g}U$r ${g}H######H$r ${g}U$r"
  LOGO[6]="    ${g}GHHHHHHB$r   "
  LOGO[7]="      ${g}U$r  ${g}U$r    "
  PACKAGES=$(dpkg -l | grep -c "^ii")
  ;;
astra*)
  motif="\x1B[94m$l"
  b="\x1B[34m$l"
  LOGO[0]="          $b.$r            "
  LOGO[1]="        $b.'$r.$b'.$r   "
  LOGO[2]="  $b.....<$r.$b:::$r.$b>.....$r"
  LOGO[3]="   $b'<$r,'$b:::::::$r',$b>'$r"
  LOGO[4]="      $b<$r,$b':::'$r,$b>$r "
  LOGO[5]="     $b<$r,$b'$r,$b>^<$r,$b'$r,$b>$r"
  LOGO[6]="    $b<,>       <,>$r"
  LOGO[7]="   $b\`             \`$r"
  PACKAGES=$(dpkg -l | grep -c "^ii")
  ;;
arc*)
  motif="\x1B[94m$l"
  b="\x1B[34m$l"
  c="\x1B[36m"
  LOGO[0]="         $b.$r          "
  LOGO[1]="        $b/^\\\\$r      "
  LOGO[2]="       $b/, ,\\\\$r     "
  LOGO[3]="      $b/,$c$l v$r$b ,\\\\   $r"
  LOGO[4]="     $b/,$c$l ( )$r$b ,\\\\  $r"
  LOGO[5]="    $b/, >   < ,\\\\$r  "
  LOGO[6]="   $b/.>       <.\\\\$r "
  LOGO[7]="  $b/>           <\\\\$r"
  PACKAGES=$(pacman -Qq | wc -l)
  ;;
cent*)
  motif="\x1B[93m$l"
  g="\x1B[32m"
  p="\x1B[35m"
  y="\x1B[33m"
  b="\x1B[34m"
  LOGO[0]="        $y$l/-\\\\$r     "
  LOGO[1]="    ${g}F44N$r $y$l#$r ${p}F11N$r "
  LOGO[2]="    ${g}L44X$r $y$l#$r ${p}L11X$r "
  LOGO[3]="  $p$l/_____$r $r~ $r$b${l}_____\\\\$r"
  LOGO[4]="  $p$l\\\\\"\"\"\"\"$r $r~ $r$b${l}\"\"\"\"\"/$r"
  LOGO[5]="    ${b}F33N$r $g$l#$r ${y}F22N$r "
  LOGO[6]="    ${b}L33X$r $g$l#$r ${y}L22X$r "
  LOGO[7]="        $g$l\-/$r     "
  PACKAGES=$(rpm -qa | wc -l)
  ;;
elementary*)
  motif="\x1B[96m$l"
  b="\x1B[94m$l"
  LOGO[0]="        $b.,*,.$r   "
  LOGO[1]="     $b.'$r eeeee$r $b'.$r"
  LOGO[2]="   $b.'$r e$r       e$r $b'.$r"
  LOGO[3]="  ${b}4${r} ,e_________e$r  ${b}L$r"
  LOGO[4]="  ${b}V$r  e\"\"\"\"\"\"\"\"\"\`$r  ${b}7$r"
  LOGO[5]="   $b\`,$r e$r       ,$r $b,\`$r"
  LOGO[6]="     $b\`, ${r}eeeee$r $b,\`$r"
  LOGO[7]="        $b\`'*'\`$r   "
  PACKAGES=$(dpkg -l | grep -c "^ii")
  ;;
*mint*)
  motif="\x1B[92m$l"
  g="\x1B[32m"
  LOGO[0]="  ${g}MM$r   $g.*^*..*^*.$r"
  LOGO[1]="  $g\$\$$r  $g\$\$'$r $g'\$\$'$r $g'\$\$"
  LOGO[2]="  $g\$\$$r  $g\$\$$r   $g\$\$$r   $g\$\$$r"
  LOGO[3]="  $g\$\$$r  $g\$\$$r   $g\$\$$r   $g\$\$$r"
  LOGO[4]="  $g\$\$$r  $g\$\$$r   $g\$\$$r   $g\$\$$r"
  LOGO[5]="  $g\$\$.$r $g\`\`$r   $g\`\`$r  $g.\$\$$r"
  LOGO[6]="  $g'Q\$\$\$\$\$\$\$\$\$\$\$\$Q'$r"
  LOGO[7]="    $g\`\`\`\`\`\`\`\`\`\`\`\`$r"
  PACKAGES=$(dpkg -l | grep -c "^ii")
  ;;
nixos*)
  motif="\x1B[94m$l"
  b="\x1B[34m$l"
  c="\x1B[96m"
  LOGO[0]="       $b\\\\\\\\$r    $c\\\\\\\\  //$r"
  LOGO[1]="        $b\\\\\\\\$r    $c\\\\\\\\//$r"
  LOGO[2]="    $b::::://====$r$c\\\\\\\\$r  $b//$r"
  LOGO[3]="       $c///$r      $c\\\\\\\\$r$b//$r"
  LOGO[4]="  $c\"\"\"\"//$r$b\\\\\\\\$r      $b///\"\"\"\"$r"
  LOGO[5]="     $c//$r  $b\\\\\\\\$r$c====//:::::$r"
  LOGO[6]="        $b//\\\\\\\\$r    $c\\\\\\\\$r"
  LOGO[7]="       $b//  \\\\\\\\$r    $c\\\\\\\\$r"
  PACKAGES=$(nix-store -q --requisites ~/.nix-profile | wc -l)
  ;;
opensuse*)
  motif="\x1B[92m$l"
  g="\x1B[32m$l"
  c="\x1B[36m"
  LOGO[0]="        $g.,*,.$r     "
  LOGO[1]="     $g.'$r  ${g}___$r  $g'.$r"
  LOGO[2]="   $g.'--<'($r${c}o$r$g)\`,$r  $g'.$r"
  LOGO[3]="  ${g}4$r     $c'_____$r$g\`$r   ${g}L$r"
  LOGO[4]="  ${g}V$r       ${g}___'$r    ${g}7$r"
  LOGO[5]="   $g\`,---->$r      $g,\`$r"
  LOGO[6]="     $g\`,$r       $g,\`$r"
  LOGO[7]="        $g\`'*'\`$r   "
  PACKAGES=$(zypper se --installed-only | wc -l)
  ;;
qubes*)
  motif="\x1B[94m$l"
  b="\x1B[34m$l"
  LOGO[0]="       $b.<>.$r           "
  LOGO[1]="    $b.<^>''<^>.$r        "
  LOGO[2]="  $b<^><$r      $b><^>$r  "
  LOGO[3]="  $b[:]$r        $b[:]$r  "
  LOGO[4]="  $b[:]$r        $b[:]$r  "
  LOGO[5]="  $b<:><$r      $b><:>$r  "
  LOGO[6]="     $b<.>..<.>>$r        "
  LOGO[7]="       $b\`<>\`$r  $b</>$r"
  PACKAGES=$(rpm -qa | wc -l)
  ;;
ubuntu*)
  motif="\x1B[93m$l"
  y="\x1B[93m$l"
  rd="\x1B[91m$l"
  LOGO[0]="         $y.,*,.$r  $rd/**\\\\$r"
  LOGO[1]="        $y\`.\`=\`.\`$r $rd\\\\**/$r"
  LOGO[2]="    $y.'.$r        $y'. .$r"
  LOGO[3]="$rd/**\\\\$r $y'$r            $y'\`$r"
  LOGO[4]="$rd\\\\**/$r $y.$r            $y.,$r"
  LOGO[5]="    $y\`,\`$r        $y,\` \`$r"
  LOGO[6]="        $y.\`'='\`$r $rd/**\\\\$r"
  LOGO[7]="         $y\`'*'\`$r $rd\\\\**/$r"
  PACKAGES=$(dpkg -l | grep -c "^ii")
  ;;
zorin*)
  motif="\x1B[94m$l"
  b="\x1B[94m"
  LOGO[0]="     $b//ZZZZZZZZZZZ\\\\\\\\$r"
  LOGO[1]="    $l//\`\`\`\`\`\`\`\`\`\`\`\`\`\\\\\\\\$r"
  LOGO[2]="   $l//......$r$l.     ...\\\\\\\\$r"
  LOGO[3]="  $b//ZZZZZZZ$r$l>    <$r${b}ZZZZ\\\\\\\\$r"
  LOGO[4]="  $b\\\\\\\\ZZZZ$r$l>    <$r${b}ZZZZZZZ//$r"
  LOGO[5]="   $l\\\\\\\\\`\`$r$l\`     \`\`\`\`\`\`\`//$r"
  LOGO[6]="    $l\\\\\\\\.............//$r"
  LOGO[7]="     $b\\\\\\\\ZZZZZZZZZZZ//$r"
  PACKAGES=$(dpkg -l | grep -c "^ii")
  ;;
*)
  motif="\x1B[93m$l"
  b="\x1B[90m"
  y="\x1B[33m$l"
  LOGO[0]="        ${b}XXXX$r    "
  LOGO[1]="       ${b}X$r${l}^$r${b}XX$r${l}^$r${b}X$r    "
  LOGO[2]="       ${b}X$r${y}<XX>$r${b}X$r    "
  LOGO[3]="     ${b}XX${r}X${b}XXXX${r}X${b}XX$r  "
  LOGO[4]="    ${b}XX${r}XXXXXXXX${b}XX$r "
  LOGO[5]="   ${b}XX${r}XXXXXXXXXX${b}XX$r"
  LOGO[6]="  ${y}I$r${b}XXX${r}XXXXXXXX${b}XXX$r${y}I$r"
  LOGO[7]="  ${y}IL>$r${b}XX${r}XXXXXX$r${b}XX$r${y}<JI$r"
  ;;
esac

###########################################
# adding only existing variables to info  #
###########################################
                         INFO+=("$motif$(whoami)$r @ $motif$(hostname)$r")
[[ ! -z $OS ]]        && INFO+=("${motif}OS:$r        $OS")
[[ ! -z $KERNEL ]]    && INFO+=("${motif}KERNEL:$r    $KERNEL")
[[ ! -z $ARCH ]]      && INFO+=("${motif}ARCH:$r      $ARCH")
[[ ! -z $UPTIME ]]    && INFO+=("${motif}UPTIME:$r    $UPTIME")
[[ ! -z $PACKAGES ]]  &&
[[ 0 -ne $PACKAGES ]] && INFO+=("${motif}PACKAGES:$r  $PACKAGES")
[[ ! -z $SHELL ]]     && INFO+=("${motif}SHELL:$r     $SHELL")
[[ ! -z $DESKTOP ]]   && INFO+=("${motif}DESKTOP:$r   $DESKTOP")

###########################################
# yielding everything                     #
###########################################
printf "${LOGO[0]}\t \x1B[37mW\x1B[97mE$r | ${INFO[0]}\n" # user@hostname
printf "${LOGO[1]}\t \x1B[31mR\x1B[91mD$r | ${INFO[1]}\n" # OS
printf "${LOGO[2]}\t \x1B[32mG\x1B[92mN$r | ${INFO[2]}\n" # kernel
printf "${LOGO[3]}\t \x1B[33mY\x1B[93mW$r | ${INFO[3]}\n" # arch
printf "${LOGO[4]}\t \x1B[34mB\x1B[94mE$r | ${INFO[4]}\n" # uptime
printf "${LOGO[5]}\t \x1B[35mM\x1B[95mA$r | ${INFO[5]}\n" # packages
printf "${LOGO[6]}\t \x1B[36mC\x1B[96mN$r | ${INFO[6]}\n" # shell
printf "${LOGO[7]}\t \x1B[30mB\x1B[90mK$r | ${INFO[7]}\n" # desktop
